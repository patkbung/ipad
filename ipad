import gifAnimation.*;

Gif loopingGif;

                        int cols = 16;
                        int rows = 10;
                        int cellSize = 35;
                        color[][] gridColors = new color[cols][rows];
                        color selectedColor = color(255, 0, 0);
                        float gridX, gridY;
                        float paletteX, paletteY;
                        boolean showSavedPopup = false;
                        int popupTimer = 0;


PFont myFont;
PImage img1, img2, img3,img4, img5, img6;

int cx, cy;
float secondsRadius;
float minutesRadius;
float hoursRadius;
float clockDiameter;
//---------------------------no 1 but 1= desk is a gif xy 
int currentPage = -1; 
int totalPages = 4;  
//---------------------------
float bookWidth;
float bookHeight;

void setup() {
  size(800, 600);
  smooth();
  bookHeight = height * 0.9;
  bookWidth = width * 0.9;
//page home
img1 = loadImage("Group 13.png");
img4 = loadImage("Group 13-1.png");

img2 = loadImage("Group 14.png");
img5 = loadImage("Group 14-1.png");

img3 = loadImage("Group 15.png");
img6 = loadImage("Group 15-1.png");

//page clock
  int radius = min(width, height) / 2;
  secondsRadius = radius * 0.55;
  minutesRadius = radius * 0.45;
  hoursRadius = radius * 0.35;
  clockDiameter = radius * 1.2;
  
  cx = width / 2;
  cy = height / 2;
  
  //diary
  loopingGif = new Gif(this, "aob (3).gif");
  loopingGif.loop();
  
  
  //game paint
   for (int i = 0; i < cols; i++) {
    for (int j = 0; j < rows; j++) {
      gridColors[i][j] = color(255);
    }
  }
}

void keyPressed() {
  if (keyCode == RIGHT) {
    currentPage = 1;
  } else if (key == 'g' || key == 'G') {
    currentPage = 3;
     } else if (key == 'o' || key == 'O') {
    currentPage = 2;
    } else if (key == 'd' || key == 'D') {
    currentPage = 4;
  } else if (key == 'p' || key == 'P') {
    if (currentPage == 3) {
      saveGridImage((width - bookWidth) / 2, (height - bookHeight) / 2, bookWidth, bookHeight);
    }
  } else if (key == 's' || key == 'S') {
    exit(); 
  }
}

// -------------------------------------------------------------
  // Color fill grid 
void mousePressed() {
  if (currentPage == 3) {
    
    for (int i = 0; i < cols; i++) {
      for (int j = 0; j < rows; j++) {
        float cx = gridX + i * cellSize;
        float cy = gridY + j * cellSize;
        if (mouseX > cx && mouseX < cx + cellSize -4 &&
            mouseY > cy && mouseY < cy + cellSize - 4) {
          gridColors[i][j] = selectedColor;
        }
      }
    }
// -------------------------------------------------------------
//pick color on palette
    color[] palette = {
      color(255, 0, 0), color(0, 255, 0), color(0, 0, 255),
      color(255, 255, 0), color(0), color(255)
    };

    for (int i = 0; i < palette.length; i++) {
      float px = paletteX + i * 40;
      float py = paletteY;
      if (mouseX > px && mouseX < px + 30 &&
          mouseY > py && mouseY < py + 30) {
        selectedColor = palette[i];
      }
    }
  }
}